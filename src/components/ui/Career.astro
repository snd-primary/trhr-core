---
import { css, cva } from "styled-system/css";

const experiences = [
  {
    year: "2021年～",
    title: "Free lance",
    description:
      "Webサイトのマークアップ/デザイン/運用に携わる。WordPressサイトのパフォーマンス改善、Next.jsやAstroを用いたJamstack構成のサイト開発を中心に活動。"
  },
  {
    year: "2023年11月～2025年4月",
    title: "SE/PG",
    description:
      "金融業界のレガシーなUI/UX開発基盤のWeb化プロジェクトに参画。フロントエンドの技術選定やCSS設計を主導。"
  },
  {
    year: "現在",
    title: "Free lance",
    description:
      "個人開発＋受託開発の２軸で活動中。最近はClaudeCodeやCursorを使ったAI駆動開発にハマっています。"
  }
];

// --- 定数 ---
const ANIMATION_DURATION_BASE = "0.3s";
const ANIMATION_DURATION_EXPAND = "0.6s"; // 要素展開時のアニメーション時間
const ANIMATION_TIMING_BASE = "ease";

// --- タイムラインアイテム ---
const timelineItem = cva({
  base: {
    position: "relative",
    paddingLeft: { base: "9px", md: "18px" }, // マーカーと縦線のためのスペース
    marginBottom: "12px",
    color: "foreground", // デフォルトのテキストカラー（コンポーネント内で上書き可能）
    fontSize: "sm",
    w: "full",

    // タイムラインの縦線
    _before: {
      content: "''",
      position: "absolute",
      left: { base: "4px", md: "5px" }, // マーカーの半径やボーダー幅を考慮して調整
      top: "11px", // マーカーの中心に合わせるための目安
      width: "2px",
      height: "calc(100% + 8px)", // 次のアイテムとの間隔を埋める
      backgroundColor: "border"
    }
  },
  variants: {
    isLast: {
      true: {
        marginBottom: "0",
        _before: {
          // 最後のアイテムは縦線を短く調整
          height: { base: "10px", md: "12px" }
        }
      }
    }
  }
});

// --- タイムラインマーカー ---
const timelineMarker = css({
  position: "absolute",
  left: "0px",
  top: "11px",
  width: { base: "10px", md: "12px" },
  aspectRatio: "square",
  borderRadius: "50%",
  backgroundColor: "background",
  border: "2px solid",
  borderColor: "primary",
  transitionProperty: "width, left, top, borderColor, background",
  transitionDuration: ANIMATION_DURATION_BASE,
  transitionTimingFunction: ANIMATION_TIMING_BASE,

  _groupHover: {
    width: { base: "18px", md: "24px" },
    left: { base: "-3.5px", md: "-5.5px" },
    top: "1.5px",
    backgroundImage: `linear-gradient(var(--gradient-angle), token(colors.primary), #FF0000)`
  }
});

// --- タイムラインインナーコンテンツのコンテナ ---
const timelineInner = css({
  w: "fit-content"
});

// --- タイムラインコンテンツエリア ---
const timelineContent = css({
  padding: { base: "6px 8px", md: "8px 4px" },
  display: "grid",
  gridTemplateColumns: "1fr",
  gap: 1,
  transition: `padding ${ANIMATION_DURATION_BASE} ${ANIMATION_TIMING_BASE}`,
  _groupHover: {
    pl: 3
  }
});

// --- 年号 ---
const timelineYear = css({
  display: "block",
  fontWeight: "bold",
  fontSize: "sm",
  color: "primary",
  userSelect: "none"
});

// --- experienceWrapper を cva レシピとして定義 ---
const experienceWrapperRecipe = cva({
  base: {
    display: "grid",
    gap: 0,
    position: "relative",
    w: "fit-content",
    maxHeight: "24px",
    overflow: "hidden",
    background: "transparent",

    borderRadius: "xs",
    border: "1px solid transparent",

    "--gradient-angle": "225deg",

    transitionProperty:
      "padding, max-height, width, background, gap, border, background-image, --gradient-angle",
    transitionDuration: ANIMATION_DURATION_EXPAND,
    transitionTimingFunction: ANIMATION_TIMING_BASE,

    _groupHover: {
      maxHeight: "500px",
      width: "full",
      pb: 3,
      px: 3,
      pt: 2,
      gap: 2,
      borderColor: "border",

      "--gradient-angle": "45deg",
      bgGradient:
        "linear-gradient(var(--gradient-angle), var(--gradient-color-first), var(--gradient-color-second))"
    }
  },
  variants: {
    isInitiallyOpen: {
      true: {
        // 初期状態で開いているスタイル
        maxHeight: "500px",
        width: "full",
        pb: 3,
        px: 3,
        pt: 2,
        gap: 2,
        background: "inherit",
        borderColor: "border",
        backgroundImage:
          "linear-gradient(var(--gradient-angle), oklch(0.79 0.15 97.66 / 0.1), oklch(0.67 0.22 38.09 / 0.1))"
      }
    }
  }
});

// --- 経験タイトル ---
const experienceTitle = css({
  fontSize: "sm",
  color: "foreground",
  position: "relative",
  whiteSpace: "nowrap",
  userSelect: "none",
  transition: `font-size ${ANIMATION_DURATION_BASE} ${ANIMATION_TIMING_BASE}`,
  _groupHover: {
    fontSize: "xl"
  }
});

// --- experienceDescription を cva レシピとして定義 ---
const experienceDescriptionRecipe = cva({
  base: {
    fontSize: "sm",
    visibility: "hidden",
    wordBreak: "break-all",
    wordWrap: "break-word",
    userSelect: "none",
    w: "full",

    opacity: 0,

    transition: `opacity ${ANIMATION_DURATION_EXPAND} ${ANIMATION_TIMING_BASE}, visibility 0s linear ${ANIMATION_DURATION_EXPAND}`,

    _groupHover: {
      fontSize: "medium",
      visibility: "visible",
      opacity: 1,
      transition: `opacity ${ANIMATION_DURATION_EXPAND} ${ANIMATION_TIMING_BASE}, visibility 0s linear 0s`
    }
  },
  variants: {
    isInitiallyOpen: {
      true: {
        visibility: "visible",
        opacity: 1,
        transition: "none"
      }
    }
  }
});
---

<div class={css({ position: "relative", w: "full", h: "auto" })}>
  {
    experiences.map((exp, index) => (
      <div
        class={timelineItem({
          isLast: index === experiences.length - 1
        })}
        role="group"
      >
        <div class={timelineInner}>
          <div class={timelineMarker} />
          <div class={timelineContent}>
            <span class={timelineYear}>{exp.year}</span>
            <div
              class={experienceWrapperRecipe({
                isInitiallyOpen: index === 0
              })}
            >
              <h4 class={experienceTitle}>{exp.title}</h4>
              <p
                class={`${experienceDescriptionRecipe({
                  isInitiallyOpen: index === 0
                })} `}
              >
                {exp.description}
              </p>
            </div>
          </div>
        </div>
      </div>
    ))
  }
</div>
