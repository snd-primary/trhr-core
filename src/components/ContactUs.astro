---
import type { ActionReturnType } from "astro:actions";
import { isInputError } from "astro:actions";
import { actions } from "astro:actions";
import { css } from "styled-system/css";
import PlaneIcon from "public/icon/plane-departure-solid.svg";

interface Props {
  result: ActionReturnType<typeof Astro.getActionResult> | undefined;
  submittedData?: { name: string; email: string; message: string };
}

const { result, submittedData = { name: "", email: "", message: "" } } =
  Astro.props;

// エラー情報を取得するヘルパー関数
const getFieldError = (fieldName: string) => {
  if (result?.error && isInputError(result.error)) {
    return result.error.fields[fieldName]?.[0];
  }
  return null;
};

// フィールドにエラーがあるかチェックするヘルパー関数 (修正案)
const hasFieldError = (fieldName: string) => {
  if (result?.error && isInputError(result.error)) {
    const fieldErrorMessages = result.error.fields[fieldName];
    // エラーメッセージの配列が存在し、かつその配列が空ではないことを確認
    const hasError =
      Array.isArray(fieldErrorMessages) && fieldErrorMessages.length > 0;

    return hasError;
  }
  console.log(`hasFieldError(${fieldName}): false (no or not an input error)`); // デバッグログ強化
  return false;
};

// フォーム値を取得するヘルパー関数（エラー時の値保持用）
const getFieldValue = (fieldName: keyof typeof submittedData) => {
  // エラー時は送信されたデータを表示、成功時は空文字
  if (result?.error) {
    return submittedData[fieldName] || "";
  }
  return "";
};

const inputBaseStyle = css({
  border: "1px solid",
  padding: "3",
  borderRadius: "2xl",
  background: "input/50",
  width: "full",
  fontSize: "md",
  transition: "all ease .2s",
  outline: "1px solid token(colors.primary/0)",
  "&:focus": {
    outline: "1px solid token(colors.primary)",
  },
});

const inputStyle = css({
  borderColor: "border",
});

const inputErrorStyle = css({
  borderColor: "destructive",
});

const labelStyle = css({
  fontSize: "sm",
  marginBottom: "2",
  display: "block",
});

const errorStyle = css({
  color: "destructive",
  fontSize: "sm",
  position: "absolute",
  bottom: -6,
  right: "0",
});

const formStyle = css({
  display: "grid",
  gap: 14,
});

const buttonStyle = css({
  px: 6,
  py: 3,
  fontSize: "xl",
  width: "1/2",
  textAlign: "center",
  borderRadius: "full",
  background: "background",
  cursor: "pointer",
  pointerEvents: "auto",
  border: "1px solid token(colors.border)",
  transition: "all ease-in-out 0.3s",
  letterSpacing: "6px",
  outline: "2px solid token(colors.primary/0)",
  color: "inherit",
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  position: "relative",
  gap: 1,
  _hover: {
    outline: "2px solid token(colors.primary)",
    color: "primary",
  },
});
---

<div class={css({ maxWidth: "md", width: "full" })}>
  <form method="POST" action={actions.formAction} novalidate class={formStyle}>
    <div class={css({ display: "grid", gap: 8 })}>
      <!-- 名前フィールド -->
      <div class={css({ position: "relative" })}>
        <label for="name" class={labelStyle}>お名前 *</label>
        <input
          class={`${inputBaseStyle} ${hasFieldError("name") ? inputErrorStyle : inputStyle}`}
          type="text"
          name="name"
          id="name"
          value={getFieldValue("name")}
          placeholder="山田 太郎"
          required
        />
        {
          getFieldError("name") && (
            <span class={errorStyle}>{getFieldError("name")}</span>
          )
        }
      </div>

      <!-- メールアドレスフィールド -->
      <div class={css({ position: "relative" })}>
        <label for="email" class={labelStyle}>メールアドレス *</label>
        <input
          class={`${inputBaseStyle} ${hasFieldError("email") ? inputErrorStyle : inputStyle}`}
          type="email"
          name="email"
          id="email"
          value={getFieldValue("email")}
          placeholder="example@xxx.com"
          required
        />
        {
          getFieldError("email") && (
            <span class={errorStyle}>{getFieldError("email")}</span>
          )
        }
      </div>

      <!-- メッセージフィールド -->
      <div class={css({ position: "relative" })}>
        <label for="message" class={labelStyle}>メッセージ</label>
        <textarea
          class={`${css({
            minHeight: "24",
            resize: "none",
          })} ${inputBaseStyle} ${hasFieldError("message") ? inputErrorStyle : inputStyle}`}
          name="message"
          id="message"
          rows={4}>{getFieldValue("message")}</textarea
        >
        {
          getFieldError("message") && (
            <span class={errorStyle}>{getFieldError("message")}</span>
          )
        }
      </div>
    </div>
    <!-- 送信ボタン -->
    <div
      class={css({
        display: "flex",
        justifyContent: "center",
      })}
    >
      <button type="submit" class={buttonStyle}>
        SEND
        <PlaneIcon
          width={26}
          height={26}
          class={css({ stroke: "currentcolor" })}
        />
      </button>
    </div>
  </form>
</div>
