---
import { defineKeyframes } from "@pandacss/dev";
import type { ActionReturnType } from "astro:actions";
import { isInputError } from "astro:actions";
import { actions } from "astro:actions";
import { css } from "styled-system/css";

interface Props {
  result: ActionReturnType<typeof Astro.getActionResult> | undefined;
  submittedData?: { name: string; email: string; message: string };
}

const { result, submittedData = { name: "", email: "", message: "" } } =
  Astro.props;

// エラー情報を一度だけ取得
const errorFields =
  result?.error && isInputError(result.error) ? result.error.fields : {};

const nameError = errorFields.name?.[0] || null;
const emailError = errorFields.email?.[0] || null;
const messageError = errorFields.message?.[0] || null;

// エラー情報を取得するヘルパー関数
const getFieldError = (fieldName: string) => {
  if (result?.error && isInputError(result.error)) {
    return result.error.fields[fieldName]?.[0];
  }
  return null;
};

// フィールドにエラーがあるかチェックするヘルパー関数
const hasFieldError = (fieldName: string) => {
  const hasError = getFieldError(fieldName) !== null;
  console.log(`hasFieldError(${fieldName}):`, hasError);
  return hasError;
};

// フォーム値を取得するヘルパー関数（エラー時の値保持用）
const getFieldValue = (fieldName: keyof typeof submittedData) => {
  // エラー時は送信されたデータを表示、成功時は空文字
  if (result?.error) {
    return submittedData[fieldName] || "";
  }
  return "";
};

const inputStyle = css({
  border: "1px solid",
  borderColor: "border",
  padding: "3",
  borderRadius: "xs",
  background: "secondary",
  width: "full",
  fontSize: "md",
  "&:focus": {
    outline: "3px double",
    outlineColor: "chart1",
    opacity: "0",
    animationName: "fadeInout",
    animationDuration: "2s",
    animationTimingFunction: "ease-in-out",
  },
});

const inputErrorStyle = css({
  border: "1px solid",
  borderColor: "rose.500",
  padding: "3",
  borderRadius: "md",
  background: "gray.2",
  color: "gray.12",
  width: "full",
  fontSize: "md",
  "&:focus": {
    borderColor: "rose.500",
    outline: "1px solid",
    outlineColor: "gray.a12",
  },
});

const labelStyle = css({
  fontSize: "sm",
  color: "gray.11",
  fontWeight: "medium",
  marginBottom: "2",
  display: "block",
});

const errorStyle = css({
  color: "red.9",
  fontSize: "sm",
  marginTop: "1",
});
---

<div class={css({ maxWidth: "md", width: "full" })}>
  <form method="POST" action={actions.formAction} novalidate>
    <div class={css({ display: "grid", gap: "4" })}>
      <!-- 名前フィールド -->
      <div>
        <label for="name" class={labelStyle}>お名前 *</label>
        <input
          class={hasFieldError("name") ? inputErrorStyle : inputStyle}
          type="text"
          name="name"
          id="name"
          value={getFieldValue("name")}
          required
        />
        {
          getFieldError("name") && (
            <span class={errorStyle}>{getFieldError("name")}</span>
          )
        }
      </div>

      <!-- メールアドレスフィールド -->
      <div>
        <label for="email" class={labelStyle}>メールアドレス</label>
        <input
          class={hasFieldError("email") ? inputErrorStyle : inputStyle}
          type="email"
          name="email"
          id="email"
          value={getFieldValue("email")}
          required
        />
        {
          getFieldError("email") && (
            <span class={errorStyle}>{getFieldError("email")}</span>
          )
        }
      </div>

      <!-- メッセージフィールド -->
      <div>
        <label for="message" class={labelStyle}>メッセージ</label>
        <textarea
          class={`${css({
            minHeight: "24",
            resize: "vertical",
          })} ${hasFieldError("message") ? inputErrorStyle : inputStyle}`}
          name="message"
          id="message"
          rows={4}>{getFieldValue("message")}</textarea
        >
        {
          getFieldError("message") && (
            <span class={errorStyle}>{getFieldError("message")}</span>
          )
        }
      </div>

      <!-- 送信ボタン -->
      <button
        type="submit"
        class={css({
          border: "1px solid",
          borderColor: "border",
          background: "borders",
          px: "6",
          py: "3",
          fontFamily: "depa",
          fontSize: "lg",
          letterSpacing: "wider",
          borderRadius: "xs",
          cursor: "pointer",
          transition: "all 0.2s ease",
          "&:hover": {
            background: "orange.10",
            borderColor: "orange.10",
          },
          "&:active": {
            transform: "translateY(1px)",
          },
        })}
      >
        SEND
      </button>
    </div>
  </form>
</div>
