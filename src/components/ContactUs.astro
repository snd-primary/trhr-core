---
import type { ActionReturnType } from "astro:actions";
import { isInputError } from "astro:actions";
import { actions } from "astro:actions";
import { css } from "styled-system/css";

interface Props {
  result: ActionReturnType<typeof Astro.getActionResult> | undefined;
  submittedData?: { name: string; email: string; message: string };
}

const { result, submittedData = { name: "", email: "", message: "" } } =
  Astro.props;

// エラー情報を一度だけ取得
/* const errorFields =
  result?.error && isInputError(result.error) ? result.error.fields : {};
 */
/* const nameError = errorFields.name?.[0] || null;
const emailError = errorFields.email?.[0] || null;
const messageError = errorFields.message?.[0] || null; */

// エラー情報を取得するヘルパー関数
const getFieldError = (fieldName: string) => {
  if (result?.error && isInputError(result.error)) {
    return result.error.fields[fieldName]?.[0];
  }
  return null;
};

// フィールドにエラーがあるかチェックするヘルパー関数
const hasFieldError = (fieldName: string) => {
  const hasError = getFieldError(fieldName) !== null;
  console.log(`hasFieldError(${fieldName}):`, hasError);
  return hasError;
};

// フォーム値を取得するヘルパー関数（エラー時の値保持用）
const getFieldValue = (fieldName: keyof typeof submittedData) => {
  // エラー時は送信されたデータを表示、成功時は空文字
  if (result?.error) {
    return submittedData[fieldName] || "";
  }
  return "";
};

const inputBaseStyle = css({
  border: "1px solid",
  padding: "3",
  borderRadius: "2xl",
  background: "input/50",
  width: "full",
  fontSize: "md",
  transition: "all ease .2s",
  outline: "1px solid token(colors.primary/0)",
  "&:focus": {
    outline: "1px solid token(colors.primary)",
  },
});

const inputStyle = css({
  borderColor: "border",
});

const inputErrorStyle = css({
  borderColor: "destructive",
});

const labelStyle = css({
  fontSize: "sm",
  marginBottom: "2",
  display: "block",
});

const errorStyle = css({
  color: "destructive",
  fontSize: "sm",
  marginTop: "1",
});
---

<div class={css({ maxWidth: "md", width: "full" })}>
  <form method="POST" action={actions.formAction} novalidate>
    <div class={css({ display: "grid", gap: 12 })}>
      <!-- 名前フィールド -->
      <div>
        <label for="name" class={labelStyle}>お名前 *</label>
        <input
          class={`${inputBaseStyle} ${hasFieldError("name") ? inputErrorStyle : inputStyle}`}
          type="text"
          name="name"
          id="name"
          value={getFieldValue("name")}
          placeholder="山田 太郎"
          required
        />
        {
          getFieldError("name") && (
            <span class={errorStyle}>{getFieldError("name")}</span>
          )
        }
      </div>

      <!-- メールアドレスフィールド -->
      <div>
        <label for="email" class={labelStyle}>メールアドレス *</label>
        <input
          class={`${inputBaseStyle} ${hasFieldError("name") ? inputErrorStyle : inputStyle}`}
          type="email"
          name="email"
          id="email"
          value={getFieldValue("email")}
          placeholder="example@xxx.com"
          required
        />
        {
          getFieldError("email") && (
            <span class={errorStyle}>{getFieldError("email")}</span>
          )
        }
      </div>

      <!-- メッセージフィールド -->
      <div>
        <label for="message" class={labelStyle}>メッセージ *</label>
        <textarea
          class={`${css({
            minHeight: "24",
            resize: "vertical",
          })} ${inputBaseStyle} ${hasFieldError("message") ? inputErrorStyle : inputStyle}`}
          name="message"
          id="message"
          rows={4}>{getFieldValue("message")}</textarea
        >
        {
          getFieldError("message") && (
            <span class={errorStyle}>{getFieldError("message")}</span>
          )
        }
      </div>

      <!-- 送信ボタン -->
      <div
        class={css({
          display: "flex",
          justifyContent: "center",
        })}
      >
        <button
          type="submit"
          class={css({
            px: 6,
            py: 3,
            fontSize: "xl",
            width: "1/2",
            textAlign: "center",
            borderRadius: "full",
            border: "1px solid token(colors.border)",
            transition: "all ease 0.2s",
            outline: "2px solid token(colors.primary/0)",
            color: "inherit",
            _hover: {
              outline: "1px double token(colors.primary)",
              color: "primary",
            },
          })}
        >
          SEND
        </button>
      </div>
    </div>
  </form>
</div>
