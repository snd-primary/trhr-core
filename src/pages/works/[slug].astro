---
import { getCollection } from 'astro:content';
import Layout from 'src/layouts/Layout.astro';
import { css } from 'styled-system/css'; // For PandaCSS

export async function getStaticPaths() {
  const worksEntries = await getCollection('works');
  return worksEntries.map(work => ({
    params: { slug: work.slug },
    props: { work },
  }));
}

const { work } = Astro.props;
const { Content } = await work.render();

// Basic styles
const pageStyles = css({
  maxWidth: '800px',
  margin: '0 auto',
  padding: { base: '1rem', md: '2rem' },
  fontFamily: 'sans-serif', // Assuming a base font is set globally in PandaCSS config
  // backgroundColor: 'token(colors.white)', // Optional: if page bg needs to differ from layout
  // boxShadow: 'sm', // Optional: if page needs a slight lift
});

const titleStyles = css({
  fontSize: { base: '2xl', md: '3xl' },
  fontWeight: 'bold',
  marginBottom: '0.75rem',
  color: 'token(colors.gray.800)',
  letterSpacing: 'tight', // Added for consistency
  lineHeight: 'shorter', // Added for better heading appearance
});

const dateStyles = css({
  fontSize: 'sm',
  color: 'token(colors.gray.600)',
  marginBottom: '0.5rem',
});

const tagsContainerStyles = css({
  marginBottom: '1rem',
});

const tagStyles = css({
  display: 'inline-block',
  backgroundColor: 'token(colors.blue.100)',
  color: 'token(colors.blue.800)',
  padding: '0.25rem 0.75rem',
  borderRadius: 'full',
  fontSize: 'xs',
  fontWeight: 'medium',
  marginRight: '0.5rem',
  marginBottom: '0.5rem',
});

const imageStyles = css({
  width: '100%',
  maxHeight: '400px',
  objectFit: 'cover',
  borderRadius: 'lg', // Slightly larger radius
  marginBottom: '1.5rem',
  border: '1px solid token(colors.gray.200)',
  boxShadow: 'md', // Added subtle shadow for depth
});

const contentStyles = css({
  lineHeight: '1.75', // Increased line height for readability
  color: 'token(colors.gray.800)', // Darker text for better contrast
  wordBreak: 'break-word',
  '& > :first-child': { marginTop: '0 !important' }, // Ensure no margin on first element
  '& h1': { fontSize: '2xl', fontWeight: 'bold', mt: '10', mb: '5', color: 'token(colors.gray.900)', lineHeight: 'tight' }, // For h1 within markdown
  '& h2': { fontSize: 'xl', fontWeight: 'semibold', mt: '8', mb: '4', color: 'token(colors.gray.900)', lineHeight: 'tight' },
  '& h3': { fontSize: 'lg', fontWeight: 'semibold', mt: '6', mb: '3', color: 'token(colors.gray.900)', lineHeight: 'tight' },
  '& h4': { fontSize: 'md', fontWeight: 'semibold', mt: '5', mb: '2', color: 'token(colors.gray.900)', lineHeight: 'tight' },
  '& p': { marginBottom: '1.25rem' }, // Slightly more space between paragraphs
  '& a': { color: 'token(colors.blue.600)', textDecoration: 'underline', _hover: { color: 'token(colors.blue.800)', textDecorationThickness: '2px' } },
  '& ul, & ol': { paddingLeft: '1.5rem', marginBottom: '1.25rem', listStylePosition: 'outside' },
  '& li': { marginBottom: '0.5rem' }, // More space between list items
  '& li::marker': { color: 'token(colors.gray.500)' },
  '& blockquote': {
    borderLeft: '4px solid token(colors.blue.300)',
    padding: '0.75rem 1rem',
    margin: '1.5rem 0',
    fontStyle: 'italic',
    color: 'token(colors.gray.700)',
    backgroundColor: 'token(colors.blue.50)',
    borderRadius: 'sm',
  },
  '& pre': {
    backgroundColor: 'token(colors.gray.800)', // Darker background for code blocks
    color: 'token(colors.gray.100)', // Light text for contrast
    padding: '1rem',
    borderRadius: 'md',
    overflowX: 'auto',
    fontSize: 'sm',
    lineHeight: '1.5', // Code-specific line height
  },
  '& code': { // Inline code
    fontFamily: 'monospace',
    backgroundColor: 'token(colors.gray.100)',
    color: 'token(colors.purple.700)', // A distinct color for inline code
    padding: '0.15rem 0.3rem',
    borderRadius: 'sm',
    fontSize: '0.875em', // Slightly smaller than surrounding text
    wordBreak: 'break-all',
  },
  '& pre code': { // Reset for code within pre blocks
    backgroundColor: 'transparent',
    color: 'inherit',
    padding: '0',
    fontSize: 'inherit',
    fontFamily: 'inherit', // Inherit monospace from pre
  },
  '& hr': {
    margin: '2rem 0',
    borderColor: 'token(colors.gray.300)',
    borderTopWidth: '1px',
  },
  '& table': {
    width: '100%',
    borderCollapse: 'collapse',
    margin: '1.5rem 0',
    fontSize: 'sm',
    textAlign: 'left',
  },
  '& th, & td': {
    border: '1px solid token(colors.gray.300)',
    padding: '0.5rem 0.75rem', // p_2 p_3
  },
  '& th': {
    backgroundColor: 'token(colors.gray.100)',
    fontWeight: 'semibold',
    color: 'token(colors.gray.700)',
  },
  '& img': { // Images within markdown content
    maxWidth: '100%',
    height: 'auto',
    borderRadius: 'md',
    margin: '1rem 0',
    boxShadow: 'sm',
  }
});
---

<Layout title={work.data.title + " - My Works"}>
  <article class={pageStyles}>
    <header>
      <h1 class={titleStyles}>{work.data.title}</h1>
      <p class={dateStyles}>
        Published on: {new Date(work.data.date).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}
      </p>
      {work.data.tags && work.data.tags.length > 0 && (
        <div class={tagsContainerStyles}>
          {work.data.tags.map(tag => (
            <span class={tagStyles}>{tag}</span>
          ))}
        </div>
      )}
    </header>

    <img src={work.data.image} alt={`Cover image for ${work.data.title}`} class={imageStyles} />

    <div class={contentStyles}>
      <Content />
    </div>
  </article>
</Layout>
