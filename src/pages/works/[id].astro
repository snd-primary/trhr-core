---
import { getEntry, render } from "astro:content";
import Layout from "src/layouts/Layout.astro";
import { css } from "styled-system/css"; // For PandaCSS
import { Image } from "astro:assets";
import Tag from "src/components/ui/content/tag.astro";

// 1. Get the slug from the incoming server request
const { id } = Astro.params;
if (id === undefined) {
  return Astro.redirect("/404");
}
// 2. Query for the entry directly using the request slug
const work = await getEntry("works", id);
// 3. Redirect if the entry does not exist
if (work === undefined) {
  return Astro.redirect("/404");
}
// 4. Render the entry to HTML in the template
const { Content } = await render(work);

// Basic styles
const pageStyles = css({
  maxWidth: "800px",
  margin: "0 auto",
  padding: { base: "1rem", md: "2rem" },
  fontFamily: "sans-serif",
  display: "grid",
  gridTemplateColumns: "1fr",
  gap: 8,
});

const titleStyles = css({
  fontSize: { base: "2xl", md: "3xl" },
  fontWeight: "bold",
});

const dateStyles = css({
  fontSize: "sm",
});

const tagsContainerStyles = css({
  display: "flex",
  gap: 2,
});

const imageStyles = css({
  width: "100%",
  maxHeight: "400px",
  aspectRatio: "portrait",
  objectFit: "cover",
  borderRadius: "2xl", // Slightly larger radius
  boxShadow: "2xl", // Added subtle shadow for depth
});

const contentStyles = css({
  lineHeight: "1.75", // Increased line height for readability
  wordBreak: "break-word",
  "& > :first-child": { marginTop: "0 !important" }, // Ensure no margin on first element
  "& h1": {
    fontSize: "2xl",
    fontWeight: "bold",
    lineHeight: "tight",
  }, // For h1 within markdown
  "& h2": {
    fontSize: "xl",
    fontWeight: "semibold",
    lineHeight: "tight",
  },
  "& h3": {
    fontSize: "lg",
    fontWeight: "semibold",
    lineHeight: "tight",
  },
  "& h4": {
    fontSize: "md",
    fontWeight: "semibold",
    lineHeight: "tight",
  },
  "& p": { marginBottom: "1.25rem" }, // Slightly more space between paragraphs
  "& a": {
    color: "token(colors.blue.600)",
    textDecoration: "underline",
    _hover: { color: "token(colors.blue.800)", textDecorationThickness: "2px" },
  },
  "& ul, & ol": {
    paddingLeft: "1.5rem",
    listStylePosition: "outside",
  },
  "& li::marker": { color: "token(colors.gray.500)" },
  "& blockquote": {
    borderLeft: "4px solid token(colors.blue.300)",
    padding: "0.75rem 1rem",
    fontStyle: "italic",
    color: "token(colors.gray.700)",
    backgroundColor: "token(colors.blue.50)",
    borderRadius: "sm",
  },
  "& pre": {
    backgroundColor: "token(colors.gray.800)", // Darker background for code blocks
    color: "token(colors.gray.100)", // Light text for contrast
    padding: "1rem",
    borderRadius: "md",
    overflowX: "auto",
    fontSize: "sm",
    lineHeight: "1.5", // Code-specific line height
  },
  "& code": {
    // Inline code
    fontFamily: "monospace",
    backgroundColor: "token(colors.gray.100)",
    color: "token(colors.purple.700)", // A distinct color for inline code
    padding: "0.15rem 0.3rem",
    borderRadius: "sm",
    fontSize: "0.875em", // Slightly smaller than surrounding text
    wordBreak: "break-all",
  },
  "& pre code": {
    // Reset for code within pre blocks
    backgroundColor: "transparent",
    color: "inherit",
    padding: "0",
    fontSize: "inherit",
    fontFamily: "inherit", // Inherit monospace from pre
  },
  "& hr": {
    borderColor: "token(colors.gray.300)",
    borderTopWidth: "1px",
  },
  "& table": {
    width: "100%",
    borderCollapse: "collapse",
    fontSize: "sm",
    textAlign: "left",
  },
  "& th, & td": {
    border: "1px solid token(colors.gray.300)",
    padding: "0.5rem 0.75rem", // p_2 p_3
  },
  "& th": {
    backgroundColor: "token(colors.gray.100)",
    fontWeight: "semibold",
    color: "token(colors.gray.700)",
  },
  "& img": {
    // Images within markdown content
    maxWidth: "100%",
    height: "auto",
    borderRadius: "md",
    boxShadow: "sm",
  },
});

const headerStyle = css({
  display: "grid",
  gridTemplateColumns: "1fr",
  gap: 2,
});
---

<Layout title={"asdf"}>
  <article class={pageStyles}>
    <header class={headerStyle}>
      <h1 class={titleStyles}>{work.data.title}</h1>
      <p class={dateStyles}>
        Published on: {
          new Date(work.data.date).toLocaleDateString("en-US", {
            year: "numeric",
            month: "long",
            day: "numeric",
          })
        }
      </p>
      {
        work.data.tags && work.data.tags.length > 0 && (
          <div class={tagsContainerStyles}>
            {work.data.tags.map((tag) => (
              <Tag tag={tag} />
            ))}
          </div>
        )
      }
    </header>

    <Image
      src={work.data.image}
      alt={`Cover image for ${work.data.title}`}
      class={imageStyles}
    />

    <div class={contentStyles}>
      <Content />
    </div>
  </article>
</Layout>
