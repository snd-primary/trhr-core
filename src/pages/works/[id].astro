---
import { getEntry, render } from "astro:content";
import Layout from "src/layouts/Layout.astro";
import { css } from "styled-system/css";
import { Image } from "astro:assets";
import Tag from "../../components/ui/content/Tag.astro";

const { id } = Astro.params;
if (id === undefined) {
  return Astro.redirect("/404");
}

const work = await getEntry("works", id);

if (work === undefined) {
  return Astro.redirect("/404");
}

const { Content } = await render(work);

const pageStyles = css({
  maxWidth: "800px",
  margin: "0 auto",
  padding: { base: "1rem", md: "2rem" },
  fontFamily: "sans-serif",
  display: "grid",
  gridTemplateColumns: "1fr",
  gap: 8,
});

const titleStyles = css({
  fontSize: { base: "2xl", md: "3xl" },
  fontWeight: "bold",
  letterSpacing: "tight",
  lineHeight: "shorter",
});

const dateStyles = css({
  fontSize: "sm",
});

const tagsContainerStyles = css({
  display: "flex",
  gap: 4,
});

const imageStyles = css({
  width: "100%",
  maxHeight: "400px",
  objectFit: "cover",
  borderRadius: "3xl",
  border: "1px solid token(colors.border)",
  boxShadow: "2xl",
});

const contentStyles = css({
  lineHeight: "1.75",
  wordBreak: "break-word",
  "& > :first-child": { marginTop: "0 !important" },
  "& h1": {
    fontSize: "2xl",
    fontWeight: "bold",
    mt: "10",
    mb: "5",
    lineHeight: "tight",
  },
  "& h2": {
    fontSize: "xl",
    fontWeight: "semibold",
    mt: "8",
    mb: "4",
    lineHeight: "tight",
  },
  "& h3": {
    fontSize: "lg",
    fontWeight: "semibold",
    mt: "6",
    mb: "3",
    lineHeight: "tight",
  },
  "& h4": {
    fontSize: "md",
    fontWeight: "semibold",
    mt: "5",
    mb: "2",
    lineHeight: "tight",
  },
  "& p": { marginBottom: "1.25rem" },
  "& a": {
    color: "token(colors.blue.600)",
    textDecoration: "underline",
    _hover: { color: "token(colors.blue.800)", textDecorationThickness: "2px" },
  },
  "& ul, & ol": {
    paddingLeft: "1.5rem",
    listStylePosition: "outside",
  },
  "& li": { marginBottom: "0.5rem" },
  "& li::marker": { color: "token(colors.gray.500)" },
  "& blockquote": {
    borderLeft: "4px solid token(colors.blue.300)",
    padding: "0.75rem 1rem",
    fontStyle: "italic",
    color: "token(colors.gray.700)",
    backgroundColor: "token(colors.blue.50)",
    borderRadius: "sm",
  },
  "& pre": {
    backgroundColor: "token(colors.gray.800)",
    color: "token(colors.gray.100)",
    padding: "1rem",
    borderRadius: "md",
    overflowX: "auto",
    fontSize: "sm",
    lineHeight: "1.5",
  },
  "& code": {
    fontFamily: "monospace",
    backgroundColor: "token(colors.gray.100)",
    color: "token(colors.purple.700)",
    padding: "0.15rem 0.3rem",
    borderRadius: "sm",
    fontSize: "0.875em",
    wordBreak: "break-all",
  },
  "& pre code": {
    backgroundColor: "transparent",
    color: "inherit",
    padding: "0",
    fontSize: "inherit",
    fontFamily: "inherit",
  },
  "& hr": {
    borderColor: "token(colors.gray.300)",
    borderTopWidth: "1px",
  },
  "& table": {
    width: "100%",
    borderCollapse: "collapse",
    fontSize: "sm",
    textAlign: "left",
  },
  "& th, & td": {
    border: "1px solid token(colors.gray.300)",
    padding: "0.5rem 0.75rem",
  },
  "& th": {
    backgroundColor: "token(colors.gray.100)",
    fontWeight: "semibold",
    color: "token(colors.gray.700)",
  },
  "& img": {
    maxWidth: "100%",
    height: "auto",
    borderRadius: "md",
    boxShadow: "sm",
  },
});

const button = css({
  px: 6,
  pt: 2,
  pb: 3,
  width: "fit-content",
  textAlign: "center",
  borderRadius: "full",
  border: "1px solid token(colors.border)",
  transition: "all ease 0.2s",
  outline: "2px solid token(colors.primary/0)",
  color: "inherit",
  _hover: {
    outline: "1px double token(colors.primary)",
    color: "primary",
  },
});

const header = css({
  display: "grid",
  gridTemplateColumns: "1fr",
  gap: 3,
});
---

<Layout title={"asdf"}>
  <article class={pageStyles}>
    <Image
      src={work.data.image}
      alt={`Cover image for ${work.data.title}`}
      class={imageStyles}
    />
    <header class={header}>
      <h1 class={titleStyles}>{work.data.title}</h1>
      <p class={dateStyles}>
        Published on: {
          new Date(work.data.date).toLocaleDateString("en-US", {
            year: "numeric",
            month: "long",
            day: "numeric",
          })
        }
      </p>
      {
        work.data.tags && work.data.tags.length > 0 && (
          <div class={tagsContainerStyles}>
            {work.data.tags.map((tag) => (
              <Tag tag={tag} />
            ))}
          </div>
        )
      }
    </header>

    <div class={contentStyles}>
      <Content />
    </div>
    <div
      class={css({
        paddingTop: 12,
        w: "full",
        display: "flex",
        justifyContent: "center",
      })}
    >
      <a href="/works" class={button}>一覧に戻る</a>
    </div>
  </article>
</Layout>
